use crate::{helper, shift, mask};
use crate::precompute::FIRST_BIT;

/// Internal macro to ease creation of slide functions.
macro_rules! slide_fn {
    ( $outer:meta, $name:ident, $fn:expr ) => {
        $outer
        /// until it hits a stop bit. Includes any stop bits hit.
        #[inline]
        pub fn $name(bb: u64, stop: u64) -> u64 {
            let f: fn(u64, u8) -> u64 = $fn;
            let mut out = f(bb, 1);

            for _ in 0..7 {
                out |= f(!stop & out, 1);
            }

            out & !bb
        }
    }
}

macro_rules! slide_fns {
    ( $( $outer:meta, $name:ident, $fn:expr ),* $(,)? ) => {
        $(slide_fn!($outer, $name, $fn);)*
    }
}

slide_fns!(
    ///Slide downwards
    , up, shift::up,
    down, shift::down,
    right, shift::right,
    left, shift::left,
    diag_right, shift::up_right,
    diag_left, shift::down_left,
    anti_diag_right, shift::up_left,
    anti_diag_left, shift::down_right,
);

